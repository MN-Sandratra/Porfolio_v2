Create a professional developer portfolio using Next.js, Tailwind CSS, and TypeScript. The portfolio should follow a modular architecture and include the following features:

1. **Header**: 
   - A visually appealing header with a title and navigation links (Home, Projects, Education, About, Contact).
   - Include a dark/light mode toggle in the header.

2. **Vertical Sidebar**: 
   - A fixed vertical sidebar on the left side displaying my social media links (LinkedIn, GitHub, Twitter, etc.). This sidebar should remain fixed while scrolling.
   - The sidebar should have a collapsible feature for mobile views.

3. **Main Content Area**:
   - **Projects Section**: A grid layout displaying my projects with titles, descriptions, and links to live demos or GitHub repositories. Each project card should have a hover effect for better interactivity.
   - **Education Section**: A list or grid layout showcasing my educational background and certifications, including institution, degree/certification, and year obtained.
   - **About Section**: A brief introduction about myself, including my skills and background.
   - **Contact Section**: A form allowing visitors to reach out to me directly.
   
4. **Footer**: A simple footer with copyright information and additional links.

### Design Requirements:
- Use Tailwind CSS for styling, ensuring the layout is responsive and visually appealing.
- Implement a dark/light mode toggle with smooth transitions.
- Use a hamburger menu for the navigation in mobile view that can be opened and closed.
- Ensure a consistent color scheme and typography that reflects professionalism.

2. **Create DTOs**:
- **ProjectDTO.ts**: Define a TypeScript interface for project data.
- **EducationDTO.ts**: Define a TypeScript interface for education data.

3. **Build the Components**:
- Create functional components for Header, Sidebar, ProjectCard, EducationCard, Footer, and BurgerMenu.
- Each component should accept props based on the respective DTO.
- Implement the dark/light mode toggle functionality in the Header.

4. **Main Page (`index.tsx`)**:
- Incorporate the Header, Sidebar, and main sections (Projects, Education, About, Contact).
- Use sample data based on the DTOs to populate the sections.

5. **Provide Example Data**:
- Create example project and education data to test the display in the components.

Focus on creating a clean, modern, and user-friendly design that effectively showcases my work and qualifications while ensuring the page is fully responsive and utilizes TypeScript for type safety and modularity.
